{"version":3,"sources":["components/Wrapper/Wrapper.js","components/AnimalCard/AnimalCard.js","components/Head/Head.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","AnimalCard","value","name","onClick","handleClick","alt","src","image","science","status","Head","currentScore","highScore","correct","Title","App","state","animals","chosen","handleShuffle","shuffled","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","shuffle","_this","setState","handleReset","handleIncrement","newScore","indexOf","concat","_this2","this","components_Wrapper_Wrapper","components_Title_Title","components_Head_Head","map","animal","components_AnimalCard_AnimalCard","id","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a8eb132a.chunk.js","sourcesContent":["import React from \"react\"\nimport './Wrapper.css'\n\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>\n\nexport default Wrapper","import React from \"react\"\nimport './AnimalCard.css'\n\nconst AnimalCard = props => (\n  <div className=\"card\"\n      value={props.name} \n      onClick={() => props.handleClick(props.name)}\n  >\n    <div className=\"img-container\">\n      <img className=\"img-fluid\" alt={props.name} src={props.image} />\n    </div>\n    <div className=\"content\">\n      <ul>\n        <li>\n          <strong>Common Name:</strong> {props.name}\n        </li>\n        <li>\n          <strong>Scientific Name:</strong> {props.science}\n        </li>\n        <li>\n          <strong>Consevation Status:</strong> {props.status}\n        </li>\n\n      </ul>\n    </div>\n  </div>\n)\n\nexport default AnimalCard","import React from \"react\"\nimport \"./Head.css\"\n\nconst Head = props => (\n  <nav>\n    <ul>\n      <li>Score: { props.currentScore }</li>\n      <li>High Score: { props.highScore }</li>\n      <li> { props.correct }</li>\n    </ul>\n  </nav>\n)\n\nexport default Head","import React from 'react'\nimport './Title.css'\n\nconst Title = () => (\n    <header className = \"Jumbotron\">\n    <h1>Animal Clicky Game!</h1>\n    <h3>Click on an Animal Card to score a point, but don't click an image more than once! Score 12 in a row to win. </h3>\n    </header>\n)\n\nexport default Title","import React, { Component } from 'react'\nimport Wrapper from './components/Wrapper/Wrapper'\nimport animals from './animals.json'\nimport AnimalCard from './components/AnimalCard/AnimalCard'\nimport Head from './components/Head/Head'\nimport Title from './components/Title/Title'\n\n// Fisher-Yates algorithm \nfunction shuffle (array) {\n  var currentIndex = array.length, temporaryValue, randomIndex\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex)\n    currentIndex -= 1\n\n    temporaryValue = array[currentIndex]\n    array[currentIndex] = array[randomIndex]\n    array[randomIndex] = temporaryValue\n  }\n  return array\n}\n\n\nclass App extends Component {\n\n  state = {\n    animals,\n    currentScore: 0,\n    highScore: 0,\n    chosen: [],\n  }\n\n handleShuffle = () => {\n    let shuffled = shuffle(animals)\n    this.setState({ animals: shuffled })\n  }\n\n  handleReset = () => {\n      this.setState({\n        currentScore: 0,\n        highScore: this.state.highScore,\n        chosen: []\n      })\n      this.handleShuffle()\n    }\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1\n    this.setState({\n      currentScore: newScore,\n    })\n    if (newScore >= this.state.highScore) {\n      this.setState({ highScore: newScore })\n    }\n    else if (newScore === 12) {\n      this.setState({ correct: \"You got them all right!\" })\n    }\n    this.handleShuffle()\n  }\n\n  handleClick = name => {\n    if (this.state.chosen.indexOf(name) === -1) {\n      this.handleIncrement()\n      this.setState({ chosen: this.state.chosen.concat(name), correct: \"Nice pick!\" })\n    } else {\n      this.handleReset()\n      this.setState({ correct: \"Sorry you already picked that!\" })\n    }\n  }\n\n  render() {\n    return (  \n      <Wrapper>\n        <Title />\n        <Head\n          currentScore={this.state.currentScore}\n          highScore={this.state.highScore}\n          correct={this.state.correct}\n        />\n      {this.state.animals.map(animal => (\n        <AnimalCard\n          id={animal.id}\n          key={animal.id}\n          name={animal.name}\n          image={animal.image}\n          science={animal.science}\n          status={animal.status}\n          handleIncrement={this.handleIncrement}\n          handleReset={this.handleReset}\n          handleShuffle={this.handleShuffle}\n          handleClick={this.handleClick}\n        />\n      ))}\n    </Wrapper>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}